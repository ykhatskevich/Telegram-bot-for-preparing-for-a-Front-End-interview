{
  "html": [
    {
      "id": 1,
      "text": "Which tag is used for creating a link?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "What tag is used to insert an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Which tag is in <html> determines the title of the document?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Which attribute is used to define the alternate text of an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Which attribute allows you to open a link in a new tab?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "What the 'placeholder' attribute is used for?",
      "hasOptions": false,
      "answer": "The 'placeholder' attribute is used to display a text hint or example input in a form field before the user starts entering their data."
    },
    {
      "id": 7,
      "text": "How to create an unnumbered list in HTML?",
      "hasOptions": false,
      "answer": "To create an unnumbered list in HTML, you can use the <ul> (unordered list) element, along with <li> (list item) elements to define the items in the list."
    },
    {
      "id": 8,
      "text": "What is HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - is a standard markup language used to create and structure content on the web."
    },
    {
      "id": 9,
      "text": "What does the <!DOCTYPE> tag do?",
      "hasOptions": false,
      "answer": "It helps ensure that the browser renders the content correctly according to the HTML specifications."
    },
    {
      "id": 10,
      "text": "Which tag is used to create a table?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which tag is used to create a table header?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which tag is used to create a table row?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "What tag is used to create a table cell?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "What are semantic tags in HTML?",
      "hasOptions": false,
      "answer": "Semantic HTML tags provide meaning to the structure of web pages, helping browsers and developers understand the purpose and context of different parts of the content. Using semantic tags improves accessibility, SEO (Search Engine Optimization), and maintainability of web pages."
    },
    {
      "id": 15,
      "text": "Which attribute is used to set the background image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Which tag is used to create a dropdown list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Which tag is used to insert JavaScript code into an HTML document?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Which attribute is used to specify the path to an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "What does the 'readonly' attribute do in a form element?",
      "hasOptions": false,
      "answer": "The readonly attribute in an HTML form element makes the element non-editable, meaning the user cannot change the value of the element."
    },
    {
      "id": 20,
      "text": "What are web standards and why are they needed?",
      "hasOptions": false,
      "answer": "Web standards are a set of guidelines and best practices established by standardization organizations like the World Wide Web Consortium (W3C), aiming to ensure consistency, interoperability, and accessibility across the web."
    },
    {
      "id": 21,
      "text": "What is responsive web design?",
      "hasOptions": false,
      "answer": "Responsive Web Design (RWD) is an approach to web design aimed at creating websites that provide an optimal viewing and interaction experience across a wide range of devices, from desktop computer monitors to mobile phones and tablets."
    },
    {
      "id": 22,
      "text": "Which HTML tag is used to insert a video?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Which tag is used to create the main header on a web page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "What does the <br> tag do?",
      "hasOptions": false,
      "answer": "The <br> tag in HTML stands for 'break row' and is used to create a line break in text. This means that any content following the <br> tag will appear on a new line. The <br> tag is an empty tag, meaning it does not have a closing tag."

    },
    {
      "id": 25,
      "text": "Which tag is used to create an ordered list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "What is DOM in the context of web development?",
      "hasOptions": false,
      "answer": "In web development, the DOM stands for the Document Object Model. It is a programming interface and representation of structured documents. The DOM represents a document as a tree structure where each node is an object representing a part of the document."
    },
    {
      "id": 27,
      "text": "Which attribute is used to define the styles of an element on a page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "What is the 'alt' attribute in the <img> tag?",
      "hasOptions": false,
      "answer": "The alt attribute in the <img> tag in HTML stands for “alternative text” and provides a text description of the image. This attribute plays a crucial role in web accessibility, usability, and SEO."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "What is the difference between 'resetting' and 'normalizing' CSS? Which would you choose and why?",
      "hasOptions": false,
      "answer": "CSS resetting removes all built-in browser styling to provide a blank canvas, while CSS normalization makes built-in browser styling consistent across different browsers, and the choice between them depends on whether you prefer complete control over styling (resetting) or a consistent baseline with some sensible defaults (normalizing)."
    },
    {
      "id": 2,
      "text": "What is CSS selector specificity and how does it work?",
      "hasOptions": false,
      "answer": "CSS selector specificity is a system used by browsers to determine which CSS rules should be applied to an element when multiple rules could apply. It works by assigning different weights to different types of selectors, and the rule with the higher total weight takes precedence."
    },
    {
      "id": 3,
      "text": "What is CSS?",
      "hasOptions": false,
      "answer": "CSS stands for Cascading Style Sheets. It is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG or XHTML). CSS describes how elements should be rendered on screen, on paper, in speech, or on other media."
    },
    {
      "id": 4,
      "text": "Why is it usually better to place the CSS connection in <head> and the <script> before the </body> tag? Do you know of any exceptions, give examples?",
      "hasOptions": false,
      "answer": "Placing CSS in the <head> ensures styles are applied as the content renders, preventing a flash of unstyled content and improving the user experience. JavaScript is typically placed just before the </body> tag to prevent blocking the HTML parsing, allowing the page content to load and render more quickly. Exceptions include using the async or defer attributes with scripts in the <head> to download them in parallel without blocking rendering, and inlining critical CSS directly in the <head> for faster rendering of above-the-fold content."
    },
    {
      "id": 5,
      "text": "What does the 'z-index' property do in CSS?",
      "hasOptions": false,
      "answer": "The z-index property in CSS controls the stacking order of elements along the z-axis, which is perpendicular to the screen, allowing you to specify which elements appear in front of or behind others."
    },
    {
      "id": 6,
      "text": "What are some ways to center the div?",
      "hasOptions": false,
      "answer": "There are several methods to achieve this: \n1. Using properties margin and auto: `margin: 0 auto;`.\n2. Using Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Using Grid Layout: `display: grid; place-items: center;`.\n4. Using properties text-align and inline-block: `text-align: center;` on the parent element and `display: inline-block;` on the div itself.`."
    },
    {
      "id": 7,
      "text": "Which property is used to set the background color?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Which property allows you to set the outer indents of an element?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Which property is used to set the font?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Which CSS property allows you to control the visibility of an element in the DOM, but keeps it in its place?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which CSS property is used to set element shadows?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which selector selects all .child elements that are direct children of .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Which CSS selector selects all elements that have the specified attribute starting with a specific string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Which CSS selector selects all elements that have the specified attribute ending with the specified string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "What is a pure function?",
      "hasOptions": false,
      "answer": "A pure function is a specific type of function in programming that always produces the same output for the same set of inputs and has no side effects, meaning it does not alter any external state or perform operations like I/O."
    },
    {
      "id": 2,
      "text": "What is a closure?",
      "hasOptions": false,
      "answer": "A closure is a programming concept where a function retains access to its lexical scope, even when the function is executed outside that scope, allowing the function to remember and interact with variables from its containing function even after the outer function has finished executing."
    },
    {
      "id": 3,
      "text": "Let VS const: why is it better to use const when possible?",
      "hasOptions": false,
      "answer": "Using const in JavaScript is preferable when a variable's value should not be reassigned because it helps to maintain code consistency and prevent accidental reassignment or modification, leading to fewer bugs."
    },
    {
      "id": 4,
      "text": "What are Promises in JavaScript?",
      "hasOptions": false,
      "answer": "Promises in JavaScript are objects that represent the eventual completion (or failure) of an asynchronous operation and its resulting value."
    },
    {
      "id": 5,
      "text": "What is destructuring in JavaScript?",
      "hasOptions": false,
      "answer": "Destructuring in JavaScript is a concise way to extract values from arrays or properties from objects into distinct variables. It simplifies the syntax needed to work with complex data structures, making the code more readable and maintainable."
    },
    {
      "id": 6,
      "text": "What are arrow functions in JavaScript?",
      "hasOptions": false,
      "answer": "Arrow functions in JavaScript are a concise way to write function expressions introduced with ECMAScript 6 (ES6). They allow for a shorter syntax compared to traditional function expressions and do not have their own this, arguments, super, or new.target. Instead, these values are inherited from the enclosing execution context."
    },
    {
      "id": 7,
      "text": "What is hoisting in JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting in JavaScript is a behavior in which variable and function declarations are moved to the top of their containing scope during the compile phase, before the code has been executed. This means that variables and functions can be used before they are declared in the code."
    },
    {
      "id": 8,
      "text": "Which method is used to add an element to an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Which object represents the current browser window?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Which operator is used to compare for strict equality?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which method is used to remove the last element from an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which method in JavaScript is used to convert an object to a JSON string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "What object in JavaScript is used to handle date and time?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Which array method in JavaScript is used to filter elements based on a specific criterion?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "What is React JS?",
      "hasOptions": false,
      "answer": "React JS is an open-source JavaScript library used for building user interfaces or UI components. It was developed by Facebook and is maintained by Facebook and a community of individual developers and companies."
    },
    {
      "id": 2,
      "text": "What is the key attribute for when rendering lists?",
      "hasOptions": false,
      "answer": "When rendering lists in React, the key attribute is essential to help React identify which items in the list have changed, are added, or are removed. The key prop should be a stable and unique identifier for each element in the list."
    },
    {
      "id": 3,
      "text": "How does children prop work?",
      "hasOptions": false,
      "answer": "The children prop in React is a built-in prop that allows you to send components, elements, or any other data as children to a React component. It’s a way to pass content or components directly between the opening and closing tags of a component, which can then be rendered or manipulated inside the parent component."
    },
    {
      "id": 4,
      "text": "What are portals in React?",
      "hasOptions": false,
      "answer": "Portals in React provide a way to render children into a DOM node that exists outside the hierarchy of the parent component. This is useful in situations where the parent component’s styling or behavior is affecting the child component in undesired ways, such as when building modals, tooltips, or any floating elements that should break out of their parent container."
    },
    {
      "id": 5,
      "text": "What is Reconciliation?",
      "hasOptions": false,
      "answer": "Reconciliation is the process by which React updates the DOM by efficiently comparing the current and new versions of the virtual DOM and making the minimum number of changes required to update the actual DOM to match the new virtual DOM. This process allows React applications to be fast and responsive."

      
    },
    {
      "id": 6,
      "text": "What is the useEffect hook used for in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Storing state of the component",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Handling side-effects in functional components",
          "isCorrect": true
        },
        { "id": 3, "text": "Memorizing values", "isCorrect": false },
        {
          "id": 4,
          "text": "Creating links for DOM elements",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "What happens if you pass an empty array [] as the second argument to useEffect?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Error", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect will be launched 0 times",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect will be launched once", "isCorrect": true },
        { "id": 4, "text": "There is no a correct answer", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Which hook is used to create a state in a component?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Which element is used to group elements without adding additional nodes in the DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "We have an array with strings (arr), each of which we want to reflect on the page. Which array method should be applied in the return component?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Which element is used to handle errors in the component tree?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "What argument(s) does the useMemo hook take?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "A function and an array of dependencies", "isCorrect": true },
        { "id": 2, "text": "A function and an object of options", "isCorrect": false },
        { "id": 3, "text": "A function", "isCorrect": false },
        { "id": 4, "text": "An array of dependencies", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "What is the useCallback hook used for in React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Creating links for DOM elements",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Storing state of the component",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Handling side-effects in functional components",
          "isCorrect": false
        },
        { "id": 4, "text": "Memoize callback functions", "isCorrect": true }
      ]
    }
  ]
}
